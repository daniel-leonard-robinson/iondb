/******************************************************************************/
/**
@file
@author		Scott Fazackerley, Eric Huang, Graeme Douglas
@brief		This file contains commonly used types and some helpful macros.
@copyright	Copyright 2016
				The University of British Columbia,
				IonDB Project Contributors (see AUTHORS.md)
@par
			Licensed under the Apache License, Version 2.0 (the "License");
			you may not use this file except in compliance with the License.
			You may obtain a copy of the License at
					http://www.apache.org/licenses/LICENSE-2.0
@par
			Unless required by applicable law or agreed to in writing,
			software distributed under the License is distributed on an
			"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
			either express or implied. See the License for the specific
			language governing permissions and limitations under the
			License.
*/
/******************************************************************************/
#if !defined(KV_SYSTEM_H_)
#define KV_SYSTEM_H_

#if defined(__cplusplus)
extern "C" {
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <stdint.h>
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32)
#include <malloc.h>
#else /* Not windows, then use the proper header */
#include <alloca.h>
#endif

/* Only on PC */
#if !defined(ARDUINO)
#define fremove(x)	remove(x)
#define frewind(x)	rewind(x)
#endif

#define ION_USING_MASTER_TABLE	1
#define ION_USING_ECLIPSE		0
#define ION_DEBUG				0
#define ION_IS_EQUAL			0
#define ION_IS_GREATER			1
#define ION_IS_LESS				-1
#define ION_ZERO				0
/**
@brief		Since the arduino conforms to 8.3 syntax, that's 8 + 3 = 11 + 1 (null terminator) characters.
*/
#define ION_MAX_FILENAME_LENGTH 12

/* ==================== ARDUINO CONDITIONAL COMPILATION ================================ */
#if !defined(ARDUINO)
/* Only if we're on desktop do we want to flush. Otherwise we only do a printf. */
#define DUMP(varname, format)	printf("Variable %s = " format "\n", # varname, varname);fflush(stdout)
#define PANIC(stuff)			printf("\t\t%s\n", stuff);fflush(stdout)
#else
#define DUMP(varname, format)	printf("Variable %s = " format "\n", # varname, varname)
#define PANIC(stuff)			printf("\t\t%s\n", stuff)
#endif /* Clause ARDUINO */

/* ==================== PC CONDITIONAL COMPILATION ===================================== */
#if !defined(ARDUINO)

/**
@brief		A byte type. Do not use this type directly.
@details	This type is only provided for compatibility with the Arduino. If you want a
			byte type, use @ref ion_byte_t instead.
*/
typedef unsigned char byte;

#endif
/* ===================================================================================== */

#define IONIZE(something, type)		& (type) { (something) }
#define NEUTRALIZE(something, type) (*((type *) (something)))
#define IONIZE_VAL(varname, size)	ion_byte_t varname[size]

#define UNUSED(x)					(void) ((x))

#define ION_STATUS_CREATE(error, count) \
	((ion_status_t) { (error), (count) } \
	)
#define ION_STATUS_INITIALIZE \
	((ion_status_t) { err_status_uninitialized, 0 } \
	)
#define ION_STATUS_ERROR(error) \
	((ion_status_t) { (error), 0 } \
	)
#define ION_STATUS_OK(count) \
	((ion_status_t) { err_ok, (count) } \
	)

/**
@brief		This is the available key types for ION_DB.  All types will be
			based on system defines.
*/
typedef enum ION_KEY_TYPE {
	/**> Key is a signed numeric value. */
	key_type_numeric_signed,
	/**> Key is an unsigned numeric value.*/
	key_type_numeric_unsigned,
	/**> Key is char array. */
	key_type_char_array,
	/**> Key is a null-terminated string.
		 Note that this needs padding out to avoid reading memory one does not own. */
	key_type_null_terminated_string,
} ion_key_type_t;

/**
@brief		The list of all possible errors generated by any IonDB
			operation.
*/
enum ION_ERROR {
	/**> An error code describing the situation where everything is OK. */
	err_ok,
	/**> An error code describing the situation where the status has not
		 been initialized yet. */
	err_status_uninitialized,
	/**> An error code describing the situation where an item is not found. */
	err_item_not_found,
	/**> An error code describing the situation where duplicate key is used
		 inappropariately. */
	err_duplicate_key,
	/**> An error code describing the situation where a structure is asked
		 to grow beyond it's capacity. */
	err_max_capacity,
	/**> An error code describing the situation where a configuration setting
		 for a write concern is problematic. */
	err_write_concern,
	/**> An error code describing the situation where an error occured in
		 destroying a dictionary. */
	err_dictionary_destruction_error,
	/**> An error code describing the situation where a predicate is invalid. */
	err_invalid_predicate,
	/**> An error code describing the situation where a memory allocation
		 could not occur due to the system being out of allocatable memory. */
	err_out_of_memory,
	/**> An error code describing the situation where a write operation
		 has failed. */
	err_file_write_error,
	/**> An error code describing the situation where a read operation
		 has failed. */
	err_file_read_error,
	/**> An error code describing the situation where an open operation
		 has failed. */
	err_file_open_error,
	/**> An error code describing the situation where an close operation
		 has failed. */
	err_file_close_error,
	/**> An error code describing the situation where an delete operation
		 has failed. */
	err_file_delete_error,
	/**> An error code describing the situation where a rename operation
	 has failed. */
	err_file_rename_error,
	/**> An error code describing the situation where a dictionary has failed
		 has failed to initialize. */
	err_dictionary_initialization_failed,
	/**> An error code describing the situation where an insert operation could
		 not be completed. */
	err_unable_to_insert,
	/**> An error code describing the situation where a write operation could
		 not be made to completion. */
	err_file_incomplete_write,
	/**> An error code describing the situation where a read operation could
		 not be made to completion. */
	err_file_incomplete_read,
	/**> An error code describing the situation where a seek operation could
		 not be made to completion. */
	err_file_bad_seek,
	/**> An error code describing the situation where a file operation hit
		 the EOF. */
	err_file_hit_eof,
	/**> An error code describing the situation where a requested item could
		 not be found in the primary page. */
	err_not_in_primary_page,
	/**> An error code describing the situation where a requested operation
		 is not implemented. */
	err_not_implemented,
	/**> An error code describing the situation where a system object has
		 been encountered in an illegal state. */
	err_illegal_state,
	/**> An error code describing the situation where specified size is
		 illegal, invalid, or otherwise unreasonable. */
	err_invalid_initial_size,
	/**> An error code returned when a dictionary of the same name as
		 an existing dictionary is attempted to be created. */
	err_duplicate_dictionary_error,
	/**> An error code returned when a record is too large for some entity,
		 such as a page or some other container. */
	err_record_size_too_large,
	/**> An error code describing the situation a system object was not
		 properly initialized. */
	err_uninitialized,
	/**> An error code describing the situation where something is out of
		 valid bounds. */
	err_out_of_bounds,
	/**> An error code describing the situation where an operation would
		 violate the sorted precondition. */
	err_sorted_order_violation
};

/**
@brief		The error type used to store error codes.
@details	This allows us to have finite control over the size of error codes
			returned.
*/
typedef char ion_err_t;

/**
@brief		A byte type.
@details	This is an unsigned, integral value capable of holding the range of a byte.
*/
typedef unsigned char ion_byte_t;

/**
@brief		A file position type.
*/
typedef long ion_fpos_t;
/**
@brief		A dictionary key.
*/
typedef void *ion_key_t;

/**
@brief		A dictionary value.
*/
typedef void *ion_value_t;

/**
@brief		The size (length) of a dictionary key in bytes.
*/
typedef int ion_key_size_t;

/**
@brief		The size (length) of a dictionary value in bytes.
*/
typedef int ion_value_size_t;

/**
@brief		The implementation specific size of the dictionary.
@details	Each implementation uses the dictionary size variable
			differently. It may be important to preserve the ability
			for variables of this type to become negative.
*/
typedef unsigned int ion_dictionary_size_t;

/**
@brief		A boolean type.
*/
typedef char ion_boolean_t;

/**
@brief		Boolean values.
*/
typedef enum ION_BOOLEAN {
	/**> Truthy boolean value. */
	boolean_false	= 0,
	/**> Falsy boolean value. */
	boolean_true	= 1,
} ion_boolean_e;

/**
@brief		A type for the number of results changed during an operation.
*/
typedef int ion_result_count_t;

/**
@brief		A status object that describes the result of a dictionary
			operation.
*/
typedef struct {
	ion_err_t			error;
	/**< The error code. */
	ion_result_count_t	count;	/**< The number of items affected. */
} ion_status_t;

/**
@brief		A type for record statuses used in some structures.
@details	This is used in at least the open address hash tables and
			the flat file dictionaries.
*/
typedef char ion_record_status_t;

/**
@brief		Struct used to maintain information about size of key and value.
*/
typedef struct record_info {
	ion_key_size_t		key_size;
	/**< the size of the key in bytes */
	ion_value_size_t	value_size;		/**< the size of the value in bytes */
} ion_record_info_t;

/**
@brief		Struct used to maintain key and value.
*/
typedef struct ion_record {
	ion_key_t	key;
	/**< pointer to a key */
	ion_value_t value;	/**< a pointer to value */
} ion_record_t;

/**
@brief		An integral size type for buffers.
@details	The size of the buffer is described in bytes.
*/
typedef uint32_t ion_buffer_size_t;

/**
@brief		An integral size type for pages.
@details	The size of a page is described in bytes.
*/
typedef uint16_t ion_page_size_t;

/**
@brief		A comparison result type that describes the result of a comparison.
*/
typedef enum ION_COMPARISON {
	less_than		= -1,	/**< The result for the comparison operation is A <= B. */
	equal			= 0,/**< The result for the comparison operation is A == B. */
	greater_than	= 1		/**< The result for the comparison operation is A >= B. */
} ion_comparison_e;

/**
@brief		A status type describing the current state of an initialized cursor.
*/
enum ION_CURSOR_STATUS {
	cs_invalid_index = -1,	/**< A cursor status stating that
											 the cursor has an invalid index. */
	cs_invalid_cursor,	/**< A cursor status stating that the
											 cursor is generally invalid. */
	cs_end_of_results,	/**< A cursor status stating that the
											 the cursor has reached the end of
											 the results. */
	cs_cursor_initialized,	/**< A cursor status stating that the
											 cursor has been initialized but has
											 data that hasn't yet been
											 accessed.
											 Cursor is valid but data has need
											 been accessed. */
	cs_cursor_uninitialized,/**< A cursor status stating that
											 the cursor has not yet been
											 attached to a predicate statement
											 and associated data. */
	cs_cursor_active,	/**< A cursor status stating that
											 the cursor is active and is
											 traversing data. */
	cs_possible_data_inconsistency,	/**< A cursor status stating that the
											 data in the underlying dictionary
											 has been changed, making the cursor
											 invalid. */
	cs_valid_data	/**< The data in the cursor is valid. @todo we should delete this. */
};

/**
@brief		A type for the status of a cursor.
@details	This allows us to control the size of the status type,
			rather than depending on the enum.
*/
typedef char ion_cursor_status_t;

#if defined(__cplusplus)
}
#endif

#endif /* KV_SYSTEM_H_ */
